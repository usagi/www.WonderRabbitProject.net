--
title:     5. JavaScriptの「本当の」基礎
parent:    JavaScript ⇠ Lectures
published: 2012-04-05 08:30
modified:  2012-04-05 08:30
--

<a target="_blank" href="https://github.com/usagi/www.WonderRabbitProject.net/commits/master/Lectures/JavaScript/0005/main.ja.markdown">
<ul class="datetime">
  <li class="published"><time pubdate datetime="$published$">$published$</time>
  <li class="modified"><time datetime="$modified$">$modified$<time/>
</ul>
</a>

<nav>

##### NOTICE

この記事はまだ半分しか書いていません。
残り半分は実際の授業の後に、それを元に書き起こす予定です。

##### 概要

今回から（漸く？）JavaScriptの基礎的な型システムや制御文、
一般的な処理系の挙動、言語仕様などJavaScriptそのものについての講座となります。

今回はJavaScript言語を知識として学習する上では最も重要な要素となる
この言語における型システムについて講義します。

なお、以降は毎回、講座の前半でJavaScriptに関する講義を行い、
講座の後半はJavaScriptのプロジェクトに実際に取り組む時間とします。

状況に応じて楽しく学ぶ時間としましょう・ｗ・ｂ

##### 内容

* [5.1.JavaScriptの型システム](#javascriptの型システム)
* [5.1.1.JavaScriptの型](#javascriptの型)
* [5.1.2.JavaScriptの型の一覧](#javascriptの方の一覧)
* [5.1.3.1.暗黙の型変換](#暗黙の型変換)
* [5.1.4.JavaScriptの型の分類: 値型と参照型](javascriptの方の分類値型と参照型)
* [5.1.4.1.配列リテラル](#配列リテラル)
* [5.1.4.2.リテラル](#リテラル)
* [5.A.付録](#a.付録)
* [5.A.2.プロジェクトのスタートアップ](#a.1.プロジェクトのスタートアップ)

</nav>

## 5.1.JavaScriptの型システム

あるプログラミング言語について、それがどのような言語であるのか
学習し始める際は、その言語の型システムに注目してみると良いでしょう。

さて、皆さんはまだ様々なプログラミング言語や計算機の扱い慣れている訳ではありませんから、
あまり抽象的な事はおいおいの機会に話すとして、先ずは具体的にこれから扱うべき対象について解説していきます。
もし、余裕があれば他のプログラミング言語と比較しながら覚えても構いませんが、
混乱しない様に十分に気をつけて臨んで下さい。

ここから先を読む前に、いつでもすぐに試せる様にNode.jsのインタープリターを起動して措くと良いでしょう。

<div class="note">
Note: 今回教える内容の一次情報は"[ECMA-262 5th][ecma262]§8 Types"にあります。
余裕があれば是非、言語仕様原文にも目を通して見ると良いでしょう。
初めて言語仕様書を読むときには全ての事を出てくる順に理解して行くのは難しいと思います。
読む必要性を感じた節ごとに、徐々に読み込んで行くと良いでしょう。
</div>

### 5.1.1.JavaScriptの型

皆さんは変数を宣言する時にvarを使うことを既に知っています。次の例では変数`a`を宣言し、
値`123`を初期値として定義しています。

    > var a = 123;

ここで、突然ですが`a`の型は何でしょう？答えは`typeof a`とすると分かります。

    > typeof a
    'number'

より正確に言えば、これは「変数`a`の型」ではなくて、
変数`a`に入っている「中身の型」が`number`型です。
`typeof`という演算子は与えられたオブジェクトの型を
文字列で教えてくれるJavaScript言語組み込みのキーワードです。

<div class="note">
Note: ちなみに、「変数に値を入れる」と思っているであろうそれは、
専門用語的には「変数に値を束縛する」とか言います。
主体は変数ではなくて、値のオブジェクト
（それ自体は名前も何も無く純粋にデータと言える様な「モノ」です）
だと考えると、「なるほどそういう表現になるのか」とかちょっとしたアハ体験になるかもしれませんね。
</div>

JavaScriptではJavaScriptが実行する世界の中で`typeof`をする対象は「変数」である必要などありません。
皆さんがまだ`typeof`の結果をまだ知らない様々なオブジェクトの型を`typeof`で確かめてみましょう！

    > typeof "mojimoji"
    > typeof 'moji2222'
    > typeof 3.14159265358979
    > typeof function(){}
    > typeof true
    > typeof [ 1, 3, 5, 7, 9 ]
    > typeof { name: "Namae", age: 20 }

予想とは異なる結果が示されるものはありましたか？
JavaScriptがオブジェクトに対して取りうる型は、
一般にプログラミングとしては少ない方です。
例えば整数値`123`と浮動小数点値`1.23`はどちらも
任意精度の数値型`Number`型として同様に扱われています。

また、先の例の`[ 1, 3, 5, 7, 9]`は
JavaScriptで配列を定義する為の糖衣構文の様なものですが、
実はこの構文で出来るオブジェクトの中身は
`{ name:"Namae", age:20 }`の様なハッシュ（＝連想配列）と
まったく、本当にすっかり同じだったりします。

### 5.1.2.JavaScriptの型の一覧

JavaScriptには次の型しかありません。
値の例も同時に挙げるので、それがどんな型か考えながら見て下さい。

- Number … 任意精度の整数型
    - 12345
    - 1.41421356
- String … 文字列型
    - 'auau'
    - "eoeo"
- Boolean … 真偽値型
    - true
    - false
- Object … （ハッシュ）オブジェクト型
    - null
    - [   a,   b,   c ]
    - { 0:a, 1:b, 2:c }
- Function … 関数型
    - function(){}
- Undefined … 未定義型
    - undefined
- Null … ナル型
    - null

#### 5.1.2.1.Number型

Number型が「整数」とか「浮動小数点」だとかを区別せずに単に「任意精度」となっています。
プログラミング言語の数値の取り扱いには
「計算は速いがハードウェアに依存性が高く、計算機の具体的な仕組みを理解していないと正しく扱えない方法」
と
「計算は遅いがハードウェアに依存せず、計算機の具体的な仕組みは意識しなくても扱える方法」
があります。ここでは詳しく説明しませんが、JavaScriptの言語仕様の基であるECMA-262では後者のみを仕様に入れました。
よって、JavaScriptプログラミングの中ではそれが「整数」であるとか「浮動小数点」であるとかは、
強く意識する必要はありません。

<div class="note">

Note: 「任意精度演算」や数値計算の処理速度などに興味があれば、
先ずはWikipediaの記事で概要を掴んでみると良いでしょう。

- [ja.Wikipedia/任意精度演算](http://ja.wikipedia.org/wiki/%E4%BB%BB%E6%84%8F%E7%B2%BE%E5%BA%A6%E6%BC%94%E7%AE%97)

</div>

#### 5.1.2.2.String型

String型の例には`'auau'`と`"eoeo"`を挙げました。どちらもソースコード上での書き方の違いだけで、
JavaScriptの処理系が内部で扱う上では「文字列型」として同じ扱いになります。例えば、

    > 'abc' === "abc"

この結果は`true`となります。JavaScriptはその出生からもHTMLと共に扱われる事が多いプログラミング言語です。
例えば`<meta charset="utf-8">`という文字列をJavaScriptで扱いたいとしたらどうしたら良いでしょう？

    > "<meta charset="utf-8">"

これはエラーとなります。`"`に着目して考えればすぐに気が付きますね。この様な時には、

    > '<meta charset="utf-8">'

と、すると簡単です。プログラミング言語にありがちな
文字列内に`"`を埋め込むための厄介なエスケープ(`\"`とか)
をしなくても簡単に扱うことができます。

<div class="note">
Note: プログラミング言語としては一般に`"`での囲いは文字列、
`'`での囲いは単一の文字を扱う事が多いのですが、
JavaScriptには「単一の文字」を扱う方法は「一文字しか含んでいない文字列」で代替するより他にはありません。
Number型による任意精度演算のみが提供されている状況とも言語設計の方針に整合性が見られますね。
</div>

#### 5.1.2.3.Boolean型

Boolean型は「`true`と`false`の何れかのみ」を表す、
プログラミングではお馴染みの1bitきっちりの概念を取り扱う為の型です。

#### 5.1.2.4.Object型

さて、ここまでで皆さんは凡そJavaScriptの型システムについて、
その概要や型変換に当たる機能の使い方などを学習できています。
残るは（ハッシュ）オブジェクト型を理解するだけです！

ハッシュと言う言葉はプログラミングの初学者には聞きなれないかもしれませんが、
プログラミングの用語としてはとてもポピュラーなもので、
言葉で言ってしまうと「キーとヴァリューのペアーのコンテナー」と言うデータ構造
を持つモノの事です。

    > { key1 : 123, key2 : 456, key3 : 789 }

基本はこの様に定義します。［｛「キー」と「ヴァリュー」のペア｝のコンテナー］ですね！

実は、JavaScriptでは、NumberとStringとBooleanとUndefinedの他は、
全てのオブジェクトがこのハッシュ型だったりします。
（実は関数オブジェクトもその実体はハッシュで管理されています。
但し、それについては今はまだ考え込む必要はありません。）

JavaScriptの（ハッシュ）オブジェクト型で重要な事は、キーは常に文字列型、ヴァリューは任意の型
と言う点です。キーは文字列型なので、

    > { "abc":"def" }

この様なハッシュオブジェクトの定義を行なっても構いません。これは、

    > { "012":"def" }

こんな様なキーを扱いたい場合には覚えていないと痛い目に遭う事になるでしょう。

##### 5.1.2.4.1.配列リテラル

内部的に（ハッシュ）オブジェクト型と同等に解釈されるものとしてには、

    > [ "abc", "def", "ghi", 345, 234, 123 ]

こんな様な書き方もあります。
これは（ハッシュ）オブジェクト型でキーを省略した配列ものと考えると良いでしょう。
つまりその実体は次の様なハッシュ型と等価です。

    > { "0":"abc", "1":"def", "2":"ghi", "3":345, "4":234, "5":123 }

なお、「扱えますよ」という例として、
内部の型をわざと途中で別のものとしましたが、
基本的にはその用途を考えれば、同じ型を入れて使う事が多くはなるでしょう。

<div class="note">
Note: 厳密に言えば、言語仕様上は配列リテラルは「配列型; Array」として定義されてはいるのですが、
実際には（ハッシュ）オブジェクト型の糖衣構文でしか無いので本節では敢えてその意図を伝える為に、
「配列リテラル」と言って紹介しました。
</div>

配列を扱いたい場合にまで（ハッシュ）オブジェクト型を書くのは面倒ですから、
用途を分けて混乱しない様に使いましょう。

#### 5.1.2.5.Undefined型とNull型

Undefined型はundefinedという値のみを許容した「何かが未定義な事をお知らせする」為だけに存在する型です。
「〜のみを許容」については、Boolean型は何を許容するか、Number型は何を許容するか、その様な考え方ができると
それほど違和感なく理解できるでしょう。

また、Null型も唯一の値nullの為だけに用意された型ですが、
こちらは「（宣言済みの特定の変数などが）局所的に今は意味のある値は含んでいませんよ」
という意図を表すものです。

undefinedはプログラマーが意図して使う為のものではありませんが、
nullは意図してコードに組み込む事もあるでしょう。
但し、どちらについても扱う可能性は常に存在しますから、
必要に応じて`typeof`による型チェックを組み込んだりできるように理解しておくと良いでしょう。

### 5.1.3.JavaScriptの型変換

JavaScriptはオブジェクトの型を変換…する事は厳密には「できません」が、
ある型のオブジェクトを別の型のオブジェクトから生成する事はできます。

    > "4321" + "1234"

こんな「計算」を真面目に試みるプログラミングの初学者は居ないでしょう。
しかし、ユーザーがウェブのフォームから数値を２つ入力し、
その足し算した結果を使いたいプログラムがあったらどうでしょう？
注意深く無い初心者が居たとしたならばきっと思わぬバグを実装してしまい、
もしかしたらその実装部分のテストを怠って、症状が現れた頃にはとっくに
どこが悪くて不具合が発生したのか分かり難い事態になってしまっているかもしれません。

さて、スパゲッティソースコードの話はさておき、
次の様にするとString型のオブジェクトからNumber型のオブジェクトを生成（コンストラクト）できます。

    > Number("4321") + Number("1234")

これは、文字列の`"4321"`から数値の`4321`、`"1234"`から`1234`を生成して、
それからその新たに生成された数値同士を足し算しますから、
その答えは`5555`となります。

プログラマーは常に「型」を意識してプログラミングします。
なんとなく答えがあっているうちは型なんて考えもしない様では
将来大きなバグを埋め込んで大変な思いをする事になるでしょう。

JavaScriptはダッグタイピング可能な一見すると動的型付けの様にも見えますが、
余程JavaScritに慣れて、ダッグタイピングしたコードが実行時にどの様な型付けを
されてどの様な挙動を示すのか常に意識できないうちは、型に十二分に注意しましょう。

### 5.1.3.1.暗黙の型変換

    > 1234 + "4321"

この結果はどうなるでしょう？結果はNumberでしょうか、それともString？
恐らく凡そ半数の人には予想外の結果が得られたでしょう。

では次の結果は？

    > 1234 - "4321"

この結果はNumberでしょうか、それともStringでしょうか？
恐らく今回は全員が予想を裏切られてしまうでしょう。

JavaScriptではダッグタイピング可能ですから、
文脈に応じた型の解釈が働きます。
しかし、プログラマーは行き当りばったりでプログラムを作ってはなりません。
あくまでもダッグタイピングも糖衣構文の延長の様なもので、
決して詳細を考えずとも処理系がウマイことやってくれる人工知能ではありません。

プログラマーは自分の書くコードがどの様な挙動を示すものか、
少なくとも言語仕様や自分が使う処理系については把握してコードを書きます。

先の例では、演算子`+`と演算子`-`によって、
「暗黙の型変換」が行われるルールが違うのです。
これはバグでは無く、そうしておくことで
JavaScriptのプログラマーが（それを知った上で使う事は当然の事なので）、
わざわざNumberやStringへの変換を明記しなくても素早くプログラムを書ける為の高度な機能なのです。

慣れない、或いは覚えられないよ！という場合には、

    > String(1234) + "4321"

    > 1234 - Number("4321")

この様に素直にプログラムを記述すれば良いでしょう。
なお、この例のように複雑なダッグタイピングの為の規則は、
ソースコードの可読性低下を招く事は自明ですから、
ポリシーとしてそれが嫌だという場合にも明示的にコードを書く癖を付けても良いでしょう。

### 5.1.4.JavaScriptのObject型の分類: 値型と参照型

JavaScriptの世界Number、String、Booleanは「値型」の型です。Object型は「参照型」の型です。
先ずはこれまでに登場した（といってもこれで全てですが）JavaScriptの型をこの分類で整理して示します。

- 値型
    - Number
    - String
    - Boolean
- 参照型
    - Object (Array)

#### 5.1.4.2.リテラル

型システムの終わりに、「リテラル」という言葉についても触れておきましょう。
プログラムのソースコードに`1234`とか出てきたら、これを「数値リテラル」と呼びますし、
`"ヒャッハー！"`と出てきたらこれは「文字列リテラル」と呼びます。

プログラムのソースコードは人間にも、コンパイラーにも可読なテキストデータです。
何らかの値を定義して使おうと思えば、プログラマーはソースコードを文字列で書きます。
その時、「どういう規則で書いてあればそのトークンは何型である」と言う事を
リテラル（＝ソースコードの文字列上のお約束）と言います。

なお、蛇足次いでに、プログラミングにおいてソースコード上でトークンと言った場合には、
コンパイラーがソースコードを解釈するに当たって、
「それ以上分解できないプログラム言語読み取りの上での単語」
の事を言います。

ちなみに、Number型に解釈されるリテラルにはどんなものがあるでしょうか？
少し考えて列挙してみて下さい。１０進数だけとは限りませんよ＾＾

## 5.A.付録


[prev]: ../0004/
[next]: ../0006/

[gist]:   http://gist.github.com/
[ideone]: http://www.ideone.com/


