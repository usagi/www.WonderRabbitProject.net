--
title:     12. JavaScriptの言語組み込みオブジェクト（Math編）
parent:    JavaScript ⇠ Lectures
published: 2012-05-31 08:35
--

<a target="_blank" href="https://github.com/usagi/www.WonderRabbitProject.net/commits/master/Lectures/JavaScript/0012/main.ja.markdown">
<ul class="datetime">
  <li class="published"><time pubdate datetime="$published$">$published$</time>
  <li>change log is here
</ul>
</a>

<nav>

##### 概要

前回のArray編に続いて、今回はMath組み込みオブジェクトについて整理しましょう・ｗ・ｂ

Mathでは数学の基礎的な関数や定数を手軽に扱えます。

##### 内容

<nav>
- [12.1 数学な定数](#数学な定数)
    - [12.1.1 対数の定数](#対数)
    - [12.1.2 円周率](#円周率)
    - [12.1.3 平方根](#平方根)
- [12.2 数学な関数](#数学な関数)
    - [12.2.1 三角関数](#三角関数)
    - [12.2.2 指数・対数・冪乗](#指数・対数)
    - [12.2.3 冪乗・平方根](#冪乗・平方根)
    - [12.2.4 絶対値](#絶対値)
    - [12.2.5 最大値・最小値](#最大値・最小値)
    - [12.2.6 切り上げ・切り捨て・四捨五入](#切り上げ・切り捨て・四捨五入)
    - [12.2.7 乱数](#乱数)
</nav>

## 12.1 数学な定数

JavaScriptのMathオブジェクトには予め定義された定数があり、
プログラム中の計算に於いて必要に応じて簡単に使用できる。

### 12.1.1. 対数の定数

しばしば計算処理で必要とされる対数に関する以下の値を、
JavaScriptは言語組み込みのMathオブジェクトの定数として呼び出せる。

- Math.E … ネイピア数
- Math.LN10 … = Math.log(10) 、10の自然対数
- Math.LN2 … = Math.log(2) 、2の自然対数
- Math.LOG2E … ネイピア数の底が2の対数
- Math.LOG10E … ネイピア数の底が10の対数

`Math.E`についてはオイラーの公式やネイピア数から
数学や物理学について勉強すると使い所や面白さに気がつくかもしれない。

Math.LN10とMath.LOG10Eは底を10とする対数、
つまり通常の10進数における桁数を扱う際に用いる。

ある数が何桁であるか対数を用いて求めたい場合は次の様に用いる。

    > Math.log(100) * Math.LOG10E
    2
    > Math.log(10000) * Math.LOG10E
    4

ここで`Math.log`は関数の項で後述する自然対数を求める関数である。

なお、この手法で求められる桁数は数値計算上正確な桁数であって、
通常わたしたち人間が考える整数の桁数ではない。
整数の桁数が必要であれば後述するMath.floor関数を組み合わせると良い。

    > a = Math.log(500) * Math.LOG10E
    2.6989700043360187
    > Math.floor(a)
    2

同様に`Math.LOG2E`を用いてある組み合わせ数を
表現する為に必要な情報量(bits)を計算するには、

    > Math.log(256) * Math.LOG2E
    8
    > Math.log(65536) * Math.LOG2E
    16
    > Math.log(16777216) * Math.LOG2E
    24

256パターンの組み合わせを表現する為に必要な情報量は8[bits]、
同様に65536組みには16[bits]、16777216組みには24[bits]必要と計算できる。

<div class="note">
Tips: 8[bits]のメモリーを確保できれば256組の何かを表す事ができる。
しかし、整数値の256を表す場合は一般に8[bits]よりも大きなメモリーを確保する必要がある。
一般に整数値は符号に1[bit]消費するし、
数値の0も1パターンなので例え符号無しだったとしても8[bits]で表せる整数は
[0,1,2,…,253,254,255]の様に、0から255までの256通りの整数値である。
よって通常整数値の256を表す為には8[bits]よりも大きなメモリーが必要となる。
</div>

### 12.1.2. 円周率

`Math.PI`により円周率を簡単に定義できる。

    > Math.PI
    3.141592653589793

円周率の使い道は、円の面積、球の体積、オイラーの公式などなど。

実用的な数値計算では空が青く見えたり夕焼けが赤く見えたりする理由である
レイリー散乱の計算式にも登場する。

πは様々な方程式に頻出する為、
JavaScriptでも便利な様に組み込みのMathオブジェクトから扱える様になっている。

### 12.1.3. 平方根

`Math.SQRT2`と`Math.SQRT1_2`がJavaScriptの言語組み込みの定数として扱える。
それぞれ√2と√(1/2)。

    > Math.SQRT2
    1.4142135623730951
    > Math.SQRT1_2
    0.7071067811865476

使い道としては、
直角二等辺三角形の斜辺と対辺の比が√2:1となっている事を応用した計算や、
白銀比（1:1+√2）のボックスを生成する際など。

## 12.2 数学な関数

JavaScriptでも基礎的な数学関数、数に関わる関数は言語組み込みで使用できます。

### 12.2.1 三角関数

基本の三角関数: 

（基本的には直角三角形の直角ではない角の「角度」から
それぞれの関数に「対応する２つの辺の比」を求める関数）

- `Math.sin` 正弦 … 角度→斜辺と注目する角の対辺の比
- `Math.cos` 余弦 … 角度→斜辺と注目する角で交わる対辺の比
- `Math.tan` 正接 … 角度→注目する角と直角に接続する辺と注目する角の対辺の比

角度π/4[rad]（＝45°）の斜辺と対辺の比を求める例: 

    > Math.sin(Math.PI / 4)
    0.7071067811865475

JavaScriptのMathライブラリーの関数で角度を扱う際は radian 単位を用いる。

実用は、直線距離が既知の対象物の高さを求めるなどはもちろん、
三角関数の周期性を使用し、一定の周期で振動する信号（例えば音声）を
生成したり、信号の周波数解析を行う際など多岐に渡る。

逆三角関数: 

- `asin`
- `acos`
- `atan` `atan2`

三角関数が「角度」から「比」を求める関数群である事に対し、
逆三角関数は「比」から「角度」を求める関数群である。

直角三角形の直角ではない一方の角の角度が不明の時、
その角を挟む斜辺ともう一方の辺の比が2:1、つまり0.5だった場合:

    > a = Math.acos(0.5)
    1.0471975511965979
    > a * 180 / Math.PI
    60.00000000000001

以上の様に逆三角関数を用いれば簡単に不明だった角度が分かる。

実用としては、空中に浮かぶ対象物をカメラで撮影する場合などに、
その対象物までの地上での直線距離と対象物の高さが既知の場合に、
仰角何度にカメラを向ければ対象物を中心に捉えられるかを計算するなど、
三角形の辺の比から角度を求めたい場面などで役立つ。

この逆三角関数のうち実用頻度の高い`atan`について、
更に一般的な空間座標の計算を行い易くしたものが`atan2`関数で、
`atan2`は任意の2次元座標(x,y)と原点とX軸が生す直角三角形の
逆正接を求める場合に使用する:

    > a = Math.atan2(12.7, 4.62)
    1.2218988849767412
    > a * 180 / Math.PI
    70.0096491009085

2次元座標(x: 12.7, y: 4.62)はこの座標系の原点から
X軸を基準に凡そ70.0°の仰角に捉えられる事が即座に計算できる。

### 12.2.2 指数・対数

- Math.exp … 指数関数
- Math.log … 対数関数

それぞれeの冪乗、底eの対数を計算する関数。
なお、e以外の冪乗には次節で紹介するpowを用い、
底e以外の対数は対数の底の変換を定義して用いる。
（[ECMA-262]には常用対数関数などは定義されていない。）

    > Math.exp(3)
    20.085536923187668
    > Math.log(2)
    0.6931471805599453

### 12.2.3 冪乗・平方根

- Math.pow … 冪乗
- Math.sqrt … 平方根

それぞれある数の冪乗、ある数の二乗根を求める関数。

    > Math.pow(2, 8)
    256
    > Math.sqrt(2)
    1.4142135623730951

なお、二乗根以外の平方根を求めたい際は`Math.pow`を用いれば良い。
例えば数値7の三乗根、五乗根、2.35乗根は次の様に求められる: 

    > Math.pow(7, 1/3)
    1.912931182772389
    > Math.pow(7, 1/5)
    1.4757731615945522
    > Math.pow(7, 1/2.35)
    2.2888439664041456

### 12.2.4 絶対値

`Math.abs`を用いて絶対を計算できる。

    > Math.abs(1.23)
    1.23
    > Math.abs(-2.34)
    2.34

### 12.2.5 最大値・最小値

`Math.max`と`Math.min`を用いて最大値、最小値を割り出せる。

    > Math.max(123, 456)
    456
    > Math.min(123, 456)
    123

応用として、ユーザーからの入力により得られた値を
一定の範囲に丸め込む為には: 

    > f = function(a,l,h){ return Math.min(Math.max(a,l),h); }
    [Function]
    > f(-123456, 10, 100)
    10
    > f(65536, 10, 100)
    100

といった使い方もある。

また、３つ以上から最大、最小の値を割り出す際は: 

    > Math.max(1,2,3,4,5)
    5
    > [1,2,3,4,5].reduce(function(){ return Math.max(a,b); })
    5

とか使う事もできる。

### 12.2.6 切り上げ・切り捨て・四捨五入

`Math.ceil`と`Math.floor`を用いて切り上げと切り捨て、
また`Math.round`を用いて四捨五入を行える。

    > Math.ceil(Math.PI)
    4
    > Math.floor(Math.PI)
    3
    > Math.round(Math.PI)
    3

余談として、ceilとfloorはそれぞれ天井と床を意味する英語に由来する。

### 12.2.7 乱数

`Math.random`を用いれば[0.0 - 1.0)の乱数を生成できる。
これを用いて任意の範囲の乱数を生成するには:

    > a = Math.random()
    0.22278647450730205
    > a *= 10
    2.2278647450730205
    > a += 10
    12.2278647450730205
    > a = Math.floor(a)
    12

この様にして[10 - 20)の10パターンのランダムな整数を得られる。

<div class="note">
Note: 値の範囲を表す際に下端と上端の値を含む場合は[1-10]、
含まない場合は(1-10)と表し、[1-10)と表せば[1,2,3,4,5,6,7,8,9]を意味する事に注意。
</div>

[prev]: ../0011/
[next]: ../0013/

[gist]:   http://gist.github.com/
[ideone]: http://www.ideone.com/

[ECMA-262]: http://www.ecma-international.org/publications/standards/Ecma-262.htm

