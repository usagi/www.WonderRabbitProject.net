--
parent:    JavaScript ⇠ Lectures
title:     3. GitとGitHub（前編）
published: 2012-03-30T07:25+0900
modified:  2012-03-30T07:25+0900
--

<ul class="datetime">
  <li class="published"><time pubdate datetime="$published$">$published$</time>
  <li class="modified"><time datetime="$modified$">$modified$<time/>
</ul>

<nav>

##### 概要

今回はJavaScriptの学習の前に、
モダンなソフトウェア開発環境の一部として広く用いられるようになったGitと、
Gitをベースにしたソーシャルな開発支援サービスであるGitHubを使えるにする。

セットアップを終えたなら、試しに、
前回作った「増える！うさぎペアー問題」を管理するGitリポジトリを作成し、
GitHubにプロジェクトを登録してみよう。

##### 内容

* [3.1.GitとGitHub](#githubとgithub)
* [3.2.Gitの導入](#gitの導入)
* [3.3.GitHubの登録とSSH公開鍵の登録](#githubの登録とssh公開鍵の登録)
* [3.4.GitHubに空のリポジトリを作成してみよう](#githubに空のリポジトリを作成してみよう)
* [3.5.ローカルにGitリポジトリを作成してGitHubと繋いでみよう](#ローカルにgitリポジトリを作成してgithubと繋いでみよう)
* [3.A.付録](#a.付録)
    * [3.A.1.Gitの基本コマンドとその意味](#a.1.gitの基本コマンドとその意味)
    * [3.A.2.WindowsにおけるGitインストーラーについての参考資](#a.2.windowsにおけるgitインストーラーについての参考資)
    * [3.A.3.WindowsやMacにおける快適なGitのGUIフロントエンド](#a.3.windowsやmacにおける快適なgitのguiフロントエンド)

</nav>

## 3.1.GitとGitHub

**[Git][Git]**と**[GitHub][GitHub]**は名前がよく似ていますが、混乱しない様に気をつけて下さい。
Gitは**ソフトウェアのバージョン管理を行う為のツール**、
GitHubは**（Gitを用いた）ソフトウェア開発を支援する為のウェブサービス**です。

ソフトウェアを作る際、通常はそのソフトウェアを作る為に必要なファイル群を
１つのディレクトリ（＝フォルダ）にまとめて入れて置きます。
では、そのディレクトリの管理はどうしましょう？
その答えの具体的なツール１つが**Git**です。

ソフトウェア開発のためのディレクトリの管理と言っても、その方法は様々です。
実際にありそうな例を幾つか挙げておきましょう。

1. 管理しないという管理方法
1. 必要そうな気がした時に`my-project`を`my-project-1`としてコピーする。
次に必要そうな気がした時には`my-project-2`、その次は`my-project-3`とかコピーしてバックアップする。
最新版は`my-project`、他は
1. ↑の管理方法をファイル単位で行う。
`main.js`のある時のバックアップは`main-1.js`、またその後のある時には`main-2.js`とか。
あまり大きな変更をしないファイルは末尾に数字の付いたバックアップファイルが存在しない。
1. ↑の方法に加えて`change-log.txt`とか作って置いて、
バックアップを取る度にそれがどんなタイミングで前のバックアップからはどんな変更をしたものなのかを書き記す。
1. **バージョン管理ツールを使う**

2\.や3.や4.が使われていたのはせいぜいとても古く臭くて
闇雲な開発に頼っていた暗黒時代のプロジェクトだけの神話です。
もちろん、多くの古文書や不幸にも化石（のようなプロジェクト）が現存しますから、
今から神話の時代の再現をする事も可能です。しかし、今時そんな不便な方法を敢えて選択する事はありません。

素直にバージョン管理ツールを導入してソフトウェア開発に楽に専念できる様になりましょう！
そしてモダンなソーシャル開発に参加できる様になりましょう☆（ゝω・）vｷｬﾋﾟ

<div class="note">
Note:
バージョン管理ツールはGitだけではありません。
Gitの様な「分散型」のツールが登場する以前にも、
[Subversion][Subversion]というバージョン管理ツールがあり、現在でも広く使われ続けています
（Gitやその他の先進的なツールへ以降するプロジェクトも多くなってきましたが）。
他にも、[Darcs][Darcs]、[Fossil][Fossil]、[Bazaar][Bazaar]、[Mercurial][Mercurial]…などなどがありますが、
現時点ではGitを選択するのが困った時の情報量、使っている開発者の数、
GitHubなどの対応サービスの豊富さなどの観点からは妥当な選択です。
</div>

<div class="note">
Note:
ちなみに、1.は論外です。例え数十行程度の小さなスクリプトであっても
現代的なソフトウェア開発では必ず何らかの管理が行われます。

通常はソフトウェアはそれなりの開発期間を経て作りますし、中断と再開もあるでしょう。
作った後もメンテナンスしたり、機能追加したり、担当者が変わったり、
そもそも複数の人で開発していたり…。

適切なバージョン管理を怠ると過去に消したコードが後でやっぱり必要になったり、
担当者が変わった後にそのソフトウェアがどの様に開発されてきたのか、
なぜ今のコードがそうなっているのか知る必要が生じた時、
改良しようとコードを弄りまくったが結局どうともならなくて最後に上手く動いてたコードに戻したくなった時、
複数の人が開発に参加し、その誰もが自分のペースで自分の開発したい場所に着手したい時、
プロジェクトマネージャーが進捗をコードベースで確認したい時、
どうしたら管理なきソフトウェア開発プロジェクトは上手く解決できるでしょうか？

その答えは、**現代的な管理方法を導入する**か、[家政婦のミタ][1.mita]さんに頼むか、
あるいはそもそものソフトウェア開発プロジェクトを断念するしか無いでしょう・ｘ・
</div>

## 3.2.Gitの導入

Linuxでは`yum`/`apt-get`/`pacman`/`emerge`など、
Mac OS Xでは`port`で`git`パッケージをインストールするだけです（たぶんね）。

Windowsの場合はGitの公式サイトからダウンロードリンクを辿って、

- [Git]

`Git-a.b.c-previewYYYYMMDD.exe`
（a、b、c、YYYYMMDD部分は数値が入っている事でしょう。候補が複数ある時には最新版を試してみると良いでしょう）
をダウンロードして実行しましょう。

インストーラーが動くので通常はデフォルトのまま進めてインストールを完了させると良いでしょう。
なお、念の為、インストーラーを使う際の画面写真と解説を付録3.A.2.に付けておくので参考にすると良いでしょう。

Gitのソフトウェアとしてのインストールが完了したなら、
最後にこれからGitを使う上でのあなたのデフォルトの設定をしておきましょう。

Mac OS XやLinuxの人はお好みのシェルから、
Windowsの人は`Git Bash`を起動して、
例えばあなたが"Alice"さんなら、

    $ git config --global user.name "Alice"
    $ git config --global user.email "alice@example.com"

この様にGitを扱う上でのデフォルトのユーザー名とE-Mailアドレスを設定して措きます。

さて、お疲れ様でした！
次はGitHubを使用する準備へと進みますよ！

<div class="note">
Gitはディレクトリ単位で幾つものばらばらのプロジェクトを扱う事もできますから、
プロジェクトに応じて以下のデフォルトの設定とは異なる設定を使う方法もあります。
</div>

## 3.3.GitHubの登録とSSH公開鍵の登録

今度は開発の基点となる便利なサービス[GitHub][GitHub]を使う準備をしましょう。

- [GitHub][GitHub]

`Plans, Pricing and Signup`あるいは`Signup and Pricing`から登録を始めましょう。
プランは無料の`Free for open source`（オープンソースなら無料だよ！）でも十二分に使えます。
秘密のプロジェクトを扱いたくなったり、素敵なサービスにチップを出したくなった時には有料プランを考ると良いでしょう。

さて、GitHubへのユーザーアカウントの登録を済ませたなら、
自分の環境の`Git`が`GitHub`にアクセス出来るようにSSH公開鍵の登録も行いましょう！

登録する為にはSSH鍵ペアーと呼ばれるセキュリティツール用の鍵ファイルが必要です。

<div class="note">
もし、既にsshを使った事があるか、何らかの理由でSSH鍵ペアーを持っている場合は、
以降の手順で新たに鍵ペアーを生成する必要はありません。
もちろん、既に持っているのとは別に、GitHub専用の鍵を作成しても構いませんが、
１つの環境で複数のSSH鍵ペアーを運用する為には少しばかりSSHやシステム管理の知識が必要になりますから、
よく解らない場合には勉強するか、或いは１組の鍵ペアーだけを使うと良いでしょう。
</div>

伝統的で一般的な方法としては、
端末（Windowsの人はインストーラーで`cmd`からもgit以外のgit付属ツール群を
使用可能にしていない限りは`Git Bash`で！）
を起動して、`ssh-keygen`コマンドを実行します。なお、もしも、以降の途中でやり直したいと思うことがあれば、
`CTRL+C`で処理を中止する事もできます。

1. `Enter file in which to save the key`

と、聞かれるでしょう。
これは鍵ペアーのファイル（この後"id\_rsa"と"id\_rsa.pub"が作成される）を
どこに保存したら良いかと訪ねています。
デフォルトで自分のホームディレクトリに".ssh"というディレクトリを作成して、
そこに保存する様に設定されています。`Enter`を押せばその通りになります。
非標準の場所にある鍵ペアーを用いる事もできますが、面倒なので変えない事をお勧めします。

2. `Enter passphrase`

と、次に聞かれるでしょう。
これはSSH用の鍵ファイルを実際に使う時には、
その鍵ファイルを使う為に更にパスワードを要求する場合の設定を行えます。
しかし、通常はパスワードを設定せずに`Enter`を押して進めて構いません。

ここでパスワードを設定すると、セキュリティレベルは若干高くなりますが、
実用面では面倒なだけです。ここでパスワードを設定しなくてもSSH自体の
通信の安全性や認証の安全性には影響しません。

<div class="note">
SSHでは鍵ペアーと呼ばれる「秘密鍵」（id\_rsa）と「公開鍵」（id\_rsa.pub）を用いて、
認証や通信路の暗号化を行います。
公開鍵は鍵を掛ける（＝ファイルなどを暗号化する）専用の鍵で、
この鍵ファイルを使って暗号化された情報は「秘密鍵」（＝ファイルなどを復号化する）
を使わなければ開けられない（＝解読できない）という仕組みを応用します。
秘密鍵にパスワードを設定しておくと、万が一、何らかの理由で秘密鍵が第三者の手に渡ってしまっても、
すぐにその鍵を悪用される事を防ぐ事ができるので若干安心度が向上します。
第三者が鍵ファイルを使う為のパスワードを解読するよりも前に対抗手段を講じる余裕が
もしかしたらできるかもしれないという訳です。
</div>

3. `Enter same passphrase again`

よくあるパスワードをもう一度入力して下さいというソレです。
パスワードなしの場合は今回も`Enter`だけで進めます。

以上で、SSH鍵ペアーを伝統的な方法で生成できます。実際に作成された鍵ペアーのうち、
GitHubへ登録するのは公開鍵"id\_rsa.pub"です。実はこのファイルはテキストファイルなので、
Windowsの人はエクスプローラーで`C:¥Users¥dareka-san¥.ssh¥id_rsa.pub`をメモ帳で開くなどで
中身を確認したり、コピー＆ペーストでGitHubに登録したり出来るようになっています。

さて、実は「伝統的ではない楽な方法」もあります。
このステップは一度やれば良い事ですし、この作業自体を学習する意味は本論から外れるので
こちらの方法を使っても一向に構いません。（但し、これはWindows版だけのお砂糖機能です。）

1. `Git GUI`を起動する

Gitをインストールすると、`Git Bash`の他にも`Git GUI`がスタートメニューに登録されています。

2. `ヘルプ`→`SSHキーを表示`→`鍵を生成`

Git GUIにはssh-keygenのフロントエンド機能も含まれているので、これでもSSH鍵ペアーを作成できます。
この方法でもパスワードを２回聞かれるので、なし（Enter）、或いはお好みで設定して下さい。

生成された鍵ペアーのうち、公開鍵の内容が表示され、クリップボードへコピーも簡単に出来るようになっています。
勿論、`Git Bash`から`ssh-keygen`して作成した鍵ペアーも等価なものですから、そちらで既に鍵ペアーを作成できていれば、
ここでは既に作成済みの鍵ペアーの公開鍵を表示する機能のみを使える状態になっているはずです。

さて、それでは早速、作成した公開鍵をGitHubへ登録しましょう！

1. GitHubにログインし、画面上部、右端にあるスパナーとドライバーのクロスしたアイコンで
`Account Settings`を開きます。

2. 画面左側から`SSH Keys`を開きます。

3. 先程作成した公開鍵ファイル（"id\_rsa.pub"）の内容（テキストデータ）を全て選択してコピー＆ペーストしましょう。
（Git GUIからコピーしても構いません。）Titleは複数の鍵を登録する必要がある人が鍵を識別しやすくする為に設定します。
初めは特に気にしなくても良いでしょう。

SSH公開鍵の登録が無事に済んだ様なら、
GitHubを使用する準備も整いましたよ！

お疲れ様でした！！早速ちょっと使う練習へと進みましょう！

<div class="note">
もしもあなたが複数のPCを持っていて、どちらからもGitHubを使いたい場合は、一方で先に作ったSSH鍵ペアーを
他方にコピーすると簡単です。コピーせずにそれぞれのPCで別々のSSH鍵ペアーを作成して運用する場合は、
どちらのSSH公開鍵もGitHubに登録しなければなりませんから注意して下さい。
</div>

## 3.4.GitHubに空のリポジトリを作成してみよう

GitHubにログインしたなら、右側の自分がGitHubに持っているリポジトリの一覧
（まだ０件だろうけど！）
が出るところ、`Your Repositories`に表示されている`New repository`を開くと、
自分のGitHubアカウントにリポジトリを作成できます。

リポジトリの作成画面では最低限、`Project Name`に名前さえ付けてあげれば作成できます。
必要に応じてそのリポジトリの一言紹介を`Description`に加えても良いでしょう。
また、そのリポジトリの製品リリースやコミュニティのウェブサイトが既にあれば、
`Homepage URL`も書くと良いでしょう。

最後に、このリポジトリが`Anyone`（誰でも）見れる状態にするか、
`Only the people I specify`（自分が選んだ人だけ）見れる状態にするか、選べます。
`Anyone`であれば利用に制限はありませんが、そうでない選択をしたい場合は
GitHubに秘密のリポジトリを作成する為のお布施が必要になるでしょう。

「中身は空っぽ」でも、
どうやらGitHubの自分のアカウントへのリポジトリの作成は無事にできましたか？
それでは次に進んで、この空っぽの中身を早速入れてみるとしましょう！

<div class="note">
Note: どの様な時に「秘密のリポジトリ」が必要でしょうか？
１つは開発中である事を何らかのライバルに悟られたくないリポジトリの管理が必要な場合。
例えば、開発に１年かかりそうなプロジェクトがあり、
リリースすれば平均して毎日のべ１０００人のユーザーが１００円使ってくれる見込みの新規サービスがあったとします。
このリポジトリが公開されたまま開発が進めば、恐らく同業の他社のライバル製品の開発のヒントになったり、
品質の悪いまがいものが自社製品に先んじて出まわってしまいビジネスモデルが崩れてしまうかもしれません。
そんな開発に携わり、かつGitHubを使いたいという場合には秘密のリポジトリを使った方が安心でしょう。
また、もう１つの使い方も紹介しましょう。
あなたがプライベートなデータの管理にGitリポジトリを使いたいと思った時。
Gitリポジトリはファイルを管理する為の仕組みなので、何もソフトウェアをプロジェクト毎に扱う用途に限らず、
例えばあなたのMy Documentsを丸ごとGitリポジトリにして管理したり、
GitHubに秘密のリポジトリを作ってバックアップしたり、
限られた、例えば家族だとか、親友だとかとだけ共有しても良い訳です。
もっとも、それにバージョン管理システムが必要ならば、ですけどね。
</div>

## 3.5.ローカルにGitリポジトリを作成してGitHubと繋いでみよう

さて、Gitリポジトリは「分散型」とちらっと言ったかもしれません。
Gitのリポジトリは存在する場所すべてで独立しつつ、
任意のリポジトリ同士で管理情報（つまるところリポジトリにあるファイルも勿論）を交換し、
お互いのリポジトリ同士の作業状態を反映したり、あるいは不要なら取り入れずに、
分散して作業を進めるのに適したソフトウェアソース向けのバージョン管理システムです。

そんな訳で、GitHubに作成したリポジトリと連携する自分の計算機の中の「ローカルリポジトリ」を
作成して、GitHubのリポジトリと連携させてみましょう。

<div class="note">
Note: Gitにはどのリポジトリは「ローカル」（お手元の）、
どのリポジトリは「リモート」（向こうさんの）といったシステム的な区別はありません。
利用状況に応じて、あるリポジトリは別のあるリポジトリに対してローカルだったり、リモートだったりするのです。
</div>

以降では、前回作成したJavaScriptの簡単なプログラム「増える！うさぎペアー問題」のコードファイルを、
fueru-usagi.js（実際のファイル名は各自で何でも好きなもので構いませんよ！）として
どこかに保存していると仮定して進めます。まだ作成していなかった人は、
前回の講座資料を眺めて作成しておきましょう！（動作的に未完成でも構いません）

例によって`git`コマンドを使える端末（お好みのシェルないし`Git Bash`）を起動しましょう。
"fueru-usagi.js"を保存してある場所まで`cd`コマンドで辿り着きましょう。
例として日本語Windows環境の人が「ドキュメント」
（＝このフォルダはファイルシステム上では本当には`Documents`という名前。
見た目上はユーザーフレンドリーにしようと、
エクスプローラーでは「ドキュメント」としてアクセスできる様に仕掛けられているのです）
に`fueru-usagi`というディレクトリを作り、その中に`fueru-usagi.js`を保存しているとしましょう。

    alice@PC-NAME ~
    $ cd Documents
    
    alice@PC-NAME ~/Documents
    $ cd fueru-usagi
    
    alice@PC-NAME ~/Documents/fueru-usagi
    $

これで作業対象のディレクトリを「ドキュメント」（＝`Documents`）の中の
`fueru-usagi`ディレクトリへと移動できました！

<div class="note">
Note: 実は完全にコマンドやパラメーターを入力しなくても、例えば`cd Docu`くらいまで打ち込んで、
`<TAB>`キーを押してみても良いでしょう。続きの候補が１つしかなければ、コマンドやファイル名などの続きは
自動的に補完してくれる便利機能が`Bash`にはあります。
その際、ディレクトリ名は最後に`/`が付くかもしれませんが、`cd`コマンドのパラメーターとしては
末尾に`/`があっても無くても同じ動作をするので気にせず`<ENTER>`しても構いません。
</div>

<div class="note">
Note: `Git Bash`で表示されている入力を行う部分をプロンプト
（＝元々は「ここに入力して！」みたいな意味）
と言います。初期設定でもやや便利な様に、
例えばログイン中のユーザー名`alice`だとか、計算機の名前が`PC-NAME`であるとか、
そして、現在の作業ディレクトリがどこに居るのか`~/Documents/fueru-usagi`などのように表示してくれています。
ここで、`~`は「現在のユーザーのホームディレクトリ」の省略で、
`.`が「現在の作業ディレクトリ」、`..`が「１つ上のディレクトリ」を表すのと同様の便利機能の１つです。
だから、自分がいまどこに居るのか迷子になったり、手っ取り早くホームディレクトリに戻りたくなった時には、
`cd ~`とすればすぐに戻って来られます。
それと、いまさらになりますが、Windowsではディレクトリの区切り記号に`¥`を使っていますが、
計算機の世界では一般に`/`が使われている事もあり、`Git Bash`も`/`で区切る表示をしています。
この区切り記号を使うと、先の例では、ホームディレクトリに居る状態かどうかに寄らず、
`cd ~/Documents/fueru-usagi`と`~`や`/`を使う事で、一発で目的のディレクトリまで移動する事もできます。
</div>

<div class="note">
Note: 端末で今自分がどこに居るのか確認したくなった時には`pwd`、
別のディレクトリへ作業中の場所を移動したい時には`cd`、
終了したい時には`exit`コマンドを使うと良いでしょう。
ちなみに、ファイルの移動は`mv 元 先`、複製は`cp 元 先`、
ディレクトリの作成は`mkdir 名前`、ファイルの削除は`rm 名前`、
ディレクトリとその中身のまるごと削除は`rm -rf ディレクトリの名前`でできますが、
Windowsに慣れているならばそれらはエクスプローラーで作業しても構わないでしょう。
</div>

さて、無事に目的地へ辿りつけているでしょうか？`ls`（listなんちゃらの略が由来）とコマンドを打つと、
現在の作業ディレクトリの中身の一覧を表示できます。

    alice@PC-NAME ~/Documents/fueru-usagi
    $ ls
    fueru-usagi.js
    
    alice@PC-NAME ~/Documents/fueru-usagi   
    $ 

ちゃんと"fueru-usagi.js"がありましたね！では、早速この"fueru-usagi"ディレクトリを
Gitリポジトリにしてみましょう！

    alice@PC-NAME ~/Documents/fueru-usagi
    $ git init

おめでとうございます！これだけでもうこのディレクトリはGitリポジトリにできましたよ！！

<div class="note">
Note: 実は、「Gitリポジトリ」は管理対象のディレクトリの中に`.git`という「隠し」ディレクトリを作成し、
そこに管理すべきファイルが何時、誰によって、どの様に変化したか、
そういったリポジトリ管理に必要な「メタ情報」を保存するだけのものです。
だから、「Gitリポジトリ」は「単なるディレクトリに`.git`という
メタ情報記録用のディレクトリが作られただけのもの」と考えてしまっても間違いではありません。
実際、`.git`というディレクトリを削除してしまえば、それは元の、
Gitリポジトリとして管理されていない単なるディレクトリになります。
Windowsのエクスプローラーでは「隠し」という属性のついたファイルやディレクトリをデフォルトでは
表示しない設定になっていますから`.git`は見えません。表示していなくても、エクスプローラーのアドレスに
直接`.git`を付けてアクセスさせると中身にアクセスする事はできますし、エクスプローラーの表示オプションを変更すれば
半透明表示で常に「隠し」も表示される様にもできます。
直接この中身を編集する必要は普通はありませんが、気になる人は表示しておいても良いでしょう。
また、`Git Bash`の`ls`コマンドでも、`.`で始まるファイルやディレクトリは標準では一覧表示に出て来ません。
`ls -la`とすると`.`で始まるファイルやディレクトリ、また`.`や`..`ディレクトリの情報も含めて（これは-aの機能）、
さらにファイルの何やら詳細な情報（こちらが-lの機能）も表示してくれます。必要なら使うと良いでしょう。
</div>

さて、Gitリポジトリはこれで作成できていますが、GitHub同様（正確にはちょっと違いますが）にこちらも、
リポジトリとしての中身（つまりGitが実際に管理対象として変更を記録している中身）は空っぽなのです。

既に"fueru-usagi.js"というリポジトリの中で管理を始めたいファイルは存在していますから、
このファイルをリポジトリの管理下に追加してみましょう。

先ずは、`git add ファイル名`を実行して、次にリポジトリへの変更を保存する時に含めるファイルに
"fueru-usagi.js"を追加しましょう。

    $ git add fueru-usagi.js

これで、"fueru-usagi.js"というファイルの存在やその内容の変更について、
次回リポジトリの状態を保存する時にその変更内容が含まれる様になりました。

<div class="note">
実際に使う時は、具体的に個別のファイルを`add`するのは面倒なので、
`git add .`として「現在のディレクトリ以下の全てのファイルを追加」という事をよくやります。
</div>

次に、実際に現在の状態をリポジトリに記録させてみましょう！

    $ git commit -m "first commit!"

`commit`はそれまでに`add`してあったファイル（群）の現在の状態を保存するコマンドです。
`-m "first commit!"`の部分はその保存についての一言メモを書きます。これを付けないと、
`Git Bash`ではちょっと面倒な`vi`エディタが起動して「何か書いておいてよ！」と促されるのですが、
このエディタの使い方の説明は面倒なので、基本的には`-m "are kore sore dore nani"`などと適当に書いて
`commit`しましょう。（日本語が使えないのはこの段階では少々我慢して先へ進めて下さい＞＜）

無事に自分の計算機のローカルリポジトリにcommitできましたか？`show`コマンドを使うと、
Gitリポジトリが管理している内容を表示する事ができます。

    $ git show

おめでとうございます！…でいいかな？
どうやら無事に自分の計算機のローカルリポジトリでこのプロジェクトの最初の状態を保存できたならば、
このリポジトリが保存している状態をGitHubのリモートリポジトリにも適用してみましょう。

    $ git remote add git@github.com:alice/fueru-usagi

などと自分の計算機のローカルリポジトリでコマンドを打つと、
ローカルリポジトリにリモートリポジトリを設定追加できます。
（例に挙げた`git@github.com:alice/fueru-usagi`の部分は、
先に作成した自分のGitHubのリポジトリに置き換えて実行して下さい。）

さて、いよいよローカルリポジトリの変更内容（空っぽ→"fueru-usagi.js"を追加した！）を、
リモートリポジトリに追加設定したGitHubのリポジトリにも適用してみましょう。

    $ git push -u origin master

上手く行きましたか？ここではまだ、`-u origin master`の意味はわからなくても、
必要に応じて後でまた説明しますから大丈夫です。
次回からは`git push`だけでもとりあえずは大丈夫です。

さあ、GitHubのリポジトリに本当に上手く`push`されたかどうか、ウェブブラウザーで確認してみましょう。
どうですか？空っぽだったリポジトリの表示を更新してみると、ローカルリポジトリと同じ変更が適用され、
GitHubのリポジトリにも"fueru-usagi.js"が追加されていましたか？

（たぶん）GitHubデビュー、おめでとう！

さて、まだ何をやっているのかよく分かっていないかもしれないので、
もうちょっとこの練習用のリポジトリで作業を続けてみましょう。

今度は、"README"あるいは"README.txt"というそのプロジェクトの概要を記した文書を
このリポジトリに追加してみるとしましょう。
このファイルの作成は、
お好みのテキストエディターを使ってファイルを"fueru-usagi"ディレクトリの中に作成できればOKです。
内容はひとこと「てすと」と書くだけでも構いませんし、
練習だと思って少し真面目にフリーソフトウェアなどにくっついている同様のファイルを参考に
アレコレと書いてみても構いません。

さて、ファイルの準備が出来たなら、ローカルリポジトリでそのファイルの変更を記録（＝`commit`）しましょう。

    $ git add .
    $ git commit -m "add README"

さらに続いてローカルリポジトリの変更内容をリモートリポジトリにも適用（＝`push`）しましょう。

    $ git push

念の為、ウェブブラウザーでGitHubのリポジトリを確認してみて下さい。
READMEファイルが追加され、その記録が表示されましたか？

お疲れ様でした！これでGitとGitHubを使い始めることに成功しましたね！！

…まだちょっと自信が無い？では練習用のリポジトリでファイルの内容を変更してみて
（例えばREADMEに１行書き加えるとか）、`add`→`commit`→`push`してみて下さい。

<div class="note">
Note: もし、一人だけで開発を進めて、GitHubはソースコードの公開管理用とするだけであれば、
ほぼこれだけでバージョン管理しながらソフトウェア開発を進める事が既にできています。
そうした利用方法でも、GitHubを使うメリットは十分にあります。
自分一人でも２台以上の作業用ＰＣがあって、気まぐれにそのどちらからもソフトウェアを開発したい場合、
単純にリポジトリの変更記録を確認したりするGUIとしての利用、
第三者にコードレビューを頼んだりする時に、最新版のソース一式よりもリポジトリが見れた方が何かと便利だったり、
開発が停滞したならばローカルリポジトリは削除してしまっても、また再開したくなったらGitHubから`clone`してくればいい、
などなど。
</div>

さて、次回は`Git`と`GitHub`を使って複数人で開発する基本の操作を、
今回作成した練習用リポジトリを使って練習します。
必要なら本稿の付録なども参照し、基本的な使い始めの方法はマスターしておきましょう！

<div class="note">
さて、ひと通りはGitの基本であるCUIでの操作を主に教えたが、
Windowsユーザーは少々不便に感じたかもしれない。
例えば`Git Bash`はコピー＆ペーストをマウスでできないし、
日本語も文字化けしてうまく扱えない。
それに普段使い慣れたWindowsらしい操作が通用しないので操作し難い、と。
そんな時は
[付録3.A.3.WindowsやMacにおける快適なGitのGUIフロントエンド](a.3.windowsやmacにおける快適なgitのguiフロントエンド)
を参照しておくと幸せになれるかもしれません。
</div>

## 3.A.付録

## 3.A.1.gitの基本コマンドとその意味

先ずは、以下の５つを日常的に使える様に覚えましょう。

1. `git add .`

`add`は続くファイル（群）やディレクトリをリポジトリへの`commit`候補に追加するコマンドです。
対象の指示に`.`を使うと、「このディレクトリ」を指定した事になり、
結果的にそのディレクトリ以下に含まれる全てのファイルを`commit`候補に追加する事ができます。

<div class="note">
Note: `.`が「現在のディレクトリ」の意味になるのは計算機の世界ではほぼ常識みたいなものです。
同様のものとして`..`は「現在のディレクトリの１つ上のディレクトリ」の意味です。
`...`はありませんから、`.`と`..`の意味について知らなかった人はこの際に併せて覚えておくと良いでしょう。
</div>

ちなみに、`git add source1.js images/button1.png _site/*.html`みたいにごちゃごちゃと一度に続けて、
複数の別々の対象を指示する事もできますし、
何度かに分けてコマンドを実行して複数のファイルを`add`する事もできます。

`commit`するまでは何度かに分けて`add`しても構いませんが、
慣れるまでは「`git commit -m "ほげほげ"`する直前に`git add .`する」と覚えてしまっても良いでしょう。

2. `git commit -m "ほげほげ"`

`add`してあった`commit`候補のファイルたちの変更を実際にリポジトリへ記録します。
慣れるまでは、ソフトウェアに変更を加えたなら、できるだけ細かく`commit`する癖を付けておきましょう。
コミットされているのがあまり大規模な変更ばかりだと、後で見た時に一度にたくさん変更され過ぎて居て、
変更を探るのが大変ですし、変更ごとにコミットできていないと、
「あの変更とこの変更をしているこのコミットのうちこの変更は取り消したい…」とかなった時に面倒です。

`-m "ほげほげ"`はそのコミットの一言メモです。これを付けずに`git commit`とする事もできますが、
その場合Gitは気を利かせてテキストエディターを起動してくれます。つまり、「どんな内容のコミットなのか、
忘れないようにきちんとメモを残しましょうね」というわけで、
起動したテキストエディターに書いて保存した事がコミットのメモとして記録される仕掛けです。

<div class="note">
Note: デフォルトでは`git commit`と`-m "ほげほげ"`を付けずに実行すると`vi`という
玄人向けのテキストエディターが起動してしまい、操作できずに困ってしまうかもしれません。
`git config --global core.editor notepad`とかするとGitが起動してくれるテキストエディターを変更できますが、
notepad（メモ帳）では低機能過ぎて日本語など使うと文字化けしたりするでしょう。
WindowsでGit Bashを用いてcommitする際には、
`-m "ほげほげ"`とコマンドライン上で一言追加してしまう事をお勧めします。
</div>

<div class="note">
Note:「ある小さなまとまりをもった変更Aでも、その変更によってソフトウェアが動かない状態になり、
別の小さなまとまりをもった変更Bも行わなければならない」としましょう。
そんな変更を行う際にもAとBそれぞれを個別にコミットして構いません。
Gitのリポジトリは存在する場所毎に完全に独立していますから、
AとBの変更を行う作業者がAをコミット、Bをコミット、
と自分のローカルのリポジトリで作業を進める途中の変更は`push`を行わない限りは
他の作業者やGitHubのリポジトリには全く影響しません。
Gitを使う事で、遠慮無く各自がマイペースに開発を同時進行できる様になっているわけです。
</div>

3. `git push`

自分のリポジトリに`remote`として設定済みのリポジトリたちへ、
自分のリポジトリで行った変更を送り付けます！

逆を言うと、`git push`しない限りには何をどうしようと
他のリポジトリは影響を一切受けません。

`add`と`commit`は細かく行ったほうが良いと言いましたが、
`push`は他の人が受け取ったら嬉しい程度の編集作業ができてからでも構いません。

とは言え、あまりにも何かの完成に拘り過ぎると、
何時まで経ってもせっかくのあなたの拘りの編集作業が微塵も他の作業者には伝わりませんし、
もしかしたらあなたの変更は他の作業者の参考になったり、
役に立つモジュールを含んでいるかもしれません。
適度に`commit`して上手くソーシャルディベロップメントしましょう！

4. `git pull`

`pull`（引く）は`push`（押す）の対義語です。
つまり、Gitの`pull`は`remote`リポジトリから自分のローカルリポジトリへと
リポジトリの内容を受け取って来る為のコマンドです。

例えば、GitHubを基点に２人で作業する場合、
Aさんのローカルリポジトリ、Bさんのローカルリポジトリ、
GitHubのリモートリポジトリの３つのGitリポジトリが最低限存在する状況になります。

AさんもBさんも自分のローカルリポジトリでの変更をGitHubのリポジトリへ送り付けるには、
`push`すれば良いのですが、AさんがGitHubへ`push`した変更を
Bさんが自分のローカルリポジトリへ適用するにはどうしたら良いでしょうか？

答えは、Bさんが`git pull`とコマンドを打てば良いだけです。とても簡単ですね！

5. `git clone`

このコマンドはそれほど頻繁には使いません。
自分が触れたいプロジェクトのローカルリポジトリをまだ持っていない時に、
そのプロジェクトのリポジトリから自分用のローカルリポジトリを暖簾分けする際に使います。

例えば、`git clone git@github.com:dareka/nanika`を`/home/hoge`なり`C:¥Users¥hoge`なりで使うと、
hogeディレクトリの中にnanikaディレクトリが作られ、
そこにnanikaリポジトリを複製（＝クローン）できます。

`clone`で作られたリポジトリははじめからGitリポジトリですし、
きっと中身もあれば、既にコミットも何度かされているでしょう。

`git init`や`git remote add`の必要はありません。
`clone`したリポジトリでのあなたの作業のコミットたちは既に`git push`する準備が整っていますし、
`git pull`すれば`clone`したよりも後にクローン元のリポジトリで行われた変更を、
クローンで作ったあなたのローカルリポジトリにも適用できる状態になっています！

## 3.A.2.WindowsにおけるGitインストーラーについての参考資料

<div class="figure-description-container">

<img src="images/git-win-1.png" alt="figure.3.A.2.-1">
↑執筆時点の[Git公式サイト][Git]の図。

<img src="images/git-win-2.png" alt="figure.3.A.2.-2">
↑執筆時点のダウンロードサイトの図。

<img src="images/git-win-3.png" alt="figure.3.A.2.-3">
↑執筆時点の最新版インストーラーのダウンロードページの図。

<img src="images/git-win-4.png" alt="figure.3.A.2.-4">
↑ダウンロードを終え、インストーラーを起動した図。

<img src="images/git-win-5.png" alt="figure.3.A.2.-5">
↑選択肢になりそうなポイントその１。
`Git Bash Here`にチェックを入れておくとエクスプローラーで任意のディレクトリから
コンテキストメニュー（＝右クリックで出てくるメニュー）でその場所で`Git Bash`を起動できる様になる。
`Git GUI Here`も同様にエクスプローラーの任意のディレクトリから`Git GUI`を起動できる様になる。
`Git GUI`については説明しないので、
興味があれば`git`コマンドを少々覚えて使い方がわかってきた後にでも使ってみると良い。
なお、Windowsでより便利なGitの為のGUIが必要だと感じるならば`TortoiseGit`について調べてみると良い。

<img src="images/git-win-6.png" alt="figure.3.A.2.-6">
↑選択肢になりそうなポイントその２。
ここで`Use Git Bash only`を選んだままだと、
`git`コマンドを使う設定は専用の`Git Bash`という端末からのみ使える状態になる。
`Run Git from the Windows Command Prompt`を選べば、
`git`コマンドをWindowsの標準端末である`cmd`などからも使える状態に設定される。
`Run Git and included Unix tools from the Windows Command Prompt`を選べば、
`git`コマンドだけでなく、Gitインストーラーに含まれる便利なUnixのコマンド群も
`cmd`などから使える様になる。但しこのオプションを選ぶと、
Windowsに最初から入っている微妙なコマンドを置き換えてしまうのでそれが嫌なら選ばない事。
ちなみに、先生のお勧めは最後の選択肢。
勿論、デフォルトのままでも最低限`git`を使う分には困らないはずだけどね。

<img src="images/git-win-7.png" alt="figure.3.A.2.-7">
↑選択肢になりそうなポイントその３。
`Checkout Windows-style, commit Unix-style line endings`を選んだままでも本講座への参加の限りにはたぶん問題無い。
現在となってはWindowsだけがテキストデータの中で改行を表す為の文字コードに`CR+LF`を使っている。
デフォルトの設定では、Windowsの人が他の環境の人にこの問題に起因した迷惑をできるだけ掛けない可能性が高い設定となる。
`Checkout as-is, commit Unix-style line endings`を選ぶと、
Windows以外の人が編集しているテキストデータを入手する際に、改行の為の文字コードを特殊なWindows仕様に変換しない。
これを選ぶと、Windows付属のメモ帳の様な低機能なテキストエディタでは他の環境で作られた文書の改行を認識できず、
表示がバグる可能性が高い。勿論、一般的に優れたテキストエディタと呼ばれるソフトウェアの多くは、
例えそのソフトウェアがWindows用であっても、他の環境で作られたテキストファイルの改行を
上手く取り扱う事に対応はしているから、そうしたテキストエディタを使うのならばこれは恐らく最も良い選択肢となる。
但し、そうした機能が微妙なテキストエディタを愛用しているのならばこの選択肢は君にとっては不便を強いる可能性もある。
`Checkout as-is, commit as-is`は意味が分からないのならば絶対に選択してはならない。
リポジトリの中で改行の為の文字コードが混ざってしまう可能性がある。
例えば、他の作業者が編集した改行コードが`LF`のデータを開いた時に、
君のテキストエディタが微妙に気を利かせてくれてファイル内の全ての改行コードを`CR+LF`に変換してくれたとしよう。
すると、君が編集したのはたったの１行だけだったとしても、
Gitリポジトリではそのファイル全体を完全に書き換えたのと同じ事になってしまう。
Gitはテキストファイルの変更を行単位で追いかけるが、
`LF`や`CR+LF`も目に見えなくても各行の最後にきちんと存在するデータで、
それが書き換えられて居ればGitはその行が変更されたと認識する。
多くの人に迷惑を掛けるだけの可能性が高いので絶対に選んではなりません。

<img src="images/git-win-8.png" alt="figure.3.A.2.-8">
↑おめでとう！これでGitのインストーラーは終了します。
`View ReleaseNotes.rtf`はチェックを外しても構いません。
もしリリースノート（ソフトウェアがリリースされた時に変更点やら何やらを記したメモ）を見たければ
チェックを付けたままにしても良いでしょう。お疲れ様でした！

<img src="images/git-win-9.png" alt="figure.3.A.2.-9">
↑無事にインストールが完了したならば、デスクトップに`Git Bash`というショートカットができている。
これを起動すると`git`コマンドを使用できる`Git Bash`という専用の端末が起動します。
ちなみに、`git help git`とコマンドを入れればヘルプがウェブブラウザーで起動するでしょう。
また、`git help <command>`として`<command>`の部分にaddやcommitなど`git`のコマンドを入れると、
それに関するヘルプが表示される仕掛けがある事が表示されています。表示されるのは英語だけどね。
閉じる時はウィンドウの☓ボタンでも構わないけど、コマンドに`exit`と打つのがイケてる使い方です。

</div>

## 3.A.3.WindowsやMacにおける快適なGitのGUIフロントエンド

### for Windows

[TortoiseGit][TortoiseGit]というソフトウェアが
「WindowsでGitのGUIを使いたい！」
というニーズに応えてくれます。

- [TortoiseGit][TortoiseGit]

`Downloads`から最新版の、そして自分の使っているOSのアーキテクチャに併せて32-Bit版か64-Bit版を選んで
インストーラーをダウンロード、インストールすると良いでしょう。

<div class="note">
Note: ダウンロードしたインストーラーを初めて起動する時には、
何故か3分くらい（PCのスペックによる）エクスプローラーが応答停止する事があるみたいです。
Windowsの仕様なので落ち着いてちょっと待ってあげてください＞＜
</div>

基本的にはデフォルトオプションのままでインストーラーを進めて良いでしょう。
最後の`Show Changelog`のチェックはソフトウェアの更新履歴を確認する必要が無ければ
チェックを外して`Finish`しても構いません。

インストーラーを`Finish`すると、直後に`Installer Information`ダイアログが出現し、
「TortoiseGitの設定を有効にする為には再起動が必要ですけど、今すぐしますか？」
と聞いてきます。作業中の何かがあれば保存するなどして、`Yes`を押してWindowsを再起動すると良いでしょう。

TortoiseGitはWindowsのエクスプローラーと一体化したソフトウェアです。
基本的には、ファイルやフォルダのコンテキストメニューからお目当ての
Gitの操作を行います。

<img src="images/tortoise-git-1.png" alt="figure.3.A.3.-1">
↑TortoiseGitを導入するとエクスプローラーのコンテキストメニューにGit関連の操作が統合される。

<img src="images/tortoise-git-2.png" alt="figure.3.A.3.-2">
↑`git init`はそれをしたいディレクトリへ移動して、`Git Create repository here…`から。

<img src="images/tortoise-git-3.png" alt="figure.3.A.3.-3">
↑`Git Create repository here…`すると、
「ここに作っていいかい？作るリポジトリをBareタイプにしたければチェックしてね！」
とか確認が出て、`OK`すると作成を試みる。

<img src="images/tortoise-git-4.png" alt="figure.3.A.3.-4">
↑既にファイルの存在しているディレクトリだと、
「このディレクトリ空っぽじゃないけど本当にいいの？」
と最終確認が出て、`Abort`（中止）と`Proceed`（続行）を選べる。
`Proceed`すれば`git init`が見えないところで行われて完了する。

<img src="images/tortoise-git-5.png" alt="figure.3.A.3.-5">
↑`.git`を含んでいるGitリポジトリの中でコンテキストメニューを開くと、
こんな具合にGitの各種操作をメニューから選んで使用できる。

このWindowsユーザーはTortoiseGitを使用すると、
Windowsらしい操作に慣れていると違和感無く楽にGitを使い始められるかもしれない。
`commit`の際も自動的に`add`する候補を探してくれるし、
コミットメッセージも日本語で入力できる。
興味を持ったなら導入して措くと良いでしょう。

<div class="note">
執筆時点では最新版向けの日本語リソースがまだ無いので英語表示となりますが、
基本的にはGitの用語（add/commit/pushなど）が分かれば、
エクスプローラーのフォルダやファイルを右クリックしたコンテキストメニューから
目的のGitの操作を行うだけなので、さほど困らないでしょう。
</div>

### for Mac OS X

少々リサーチした結果、[SourceTree][SourceTree]というソフトウェアが
「Mac OS XでGitをGUIで使いたい！」
というニーズに応えるのに良さそうです。

- [SourceTree][SourceTree] 

もし、このソフトウェアで不満なら、シェル（恐らくデフォルトでは`Bash`と言うシェルでしょう）
をカスタマイズしてGUIが要らないくらいに自分用の使い易いCUIを手に入れるか、

- <Tower> (有償、３０日間体験版あり)

こちらの「美しい」と評判の多いGitの為のGUIフロントエンドソフトウェアを試してみるのも良いでしょう。

<div class="note">
Note: ちなみに先生が普段使っているやたらと補完やら何やら高機能で便利なシェルは[`zsh`][zsh]と言います
（日本語の情報は[Wikipedia/zsh][ja.wikipedia/zsh]から探り始めても良いでしょう）。
MacPortsにもパッケージがあると思うので、興味があれば`bash`以外のシェルについても調べてみると良いでしょう。
</div>

[prev]: ../0002/
[next]: ../0004/

[Git]:        http://git-scm.com/
[GitHub]:     http://www.github.com/
[Subversion]: http://subversion.apache.org/
[Darcs]:      http://darcs.net/
[Fossil]:     http://www.fossil-scm.org/ 
[Bazaar]:     http://bazaar.canonical.com/
[Mercurial]:  http://mercurial.selenic.com/
[1.mita]:     http://www.ntv.co.jp/kaseifu/

[TortoiseGit]: http://code.google.com/p/tortoisegit/

[SourceTree]: http://www.sourcetreeapp.com/
[Tower]:      http://www.git-tower.com/ 
[zsh]:        http://www.zsh.org/
[ja.wikipedia/zsh]: http://ja.wikipedia.org/wiki/Z_Shell

[ja.wikipedia/fibonacci]: http://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0
[gist]:   http://gist.github.com/
[ideone]: http://www.ideone.com/

